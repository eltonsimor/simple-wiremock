{"version":3,"file":"simple.wiremock.es.js","sources":["../src/app/simple.wiremock.ts"],"sourcesContent":["import * as http from 'http';\r\n\r\nexport class SimpleWiremock {\r\n    public static PORT: any;\r\n\r\n    private connections: any = [];\r\n    private assertions: any;\r\n    private server: http.Server;\r\n    private defaultPort = 5001;\r\n\r\n    constructor() {\r\n        this.assertions = {};\r\n\r\n        this.server = http.createServer((req, res) => {\r\n            const keygen = this.generateKey(String(req.method), String(req.url));\r\n            const response = this.assertPosition(keygen);\r\n            this.allowCrossDomain(res);\r\n            if (response != null) {\r\n                res.writeHead(response.assertion.status, response.assertion.headers);\r\n                res.end(JSON.stringify(response.assertion.body));\r\n            } else {\r\n                res.writeHead(500, { 'Content-Type': 'text/plain' });\r\n                res.end('No Matching Response!\\n');\r\n                throw new Error('No Match For: ' + req.method + ' ' + req.url);\r\n            }\r\n        });\r\n\r\n        SimpleWiremock.PORT = this.defaultPort;\r\n    }\r\n\r\n    instance() {\r\n        return new SimpleWiremock();\r\n    }\r\n\r\n    get(url: string, response: any) {\r\n        this.assert('GET', url, response.body, response.status, response.headers);\r\n    }\r\n    \r\n    post(url: string, response: any) {\r\n        this.assert('POST', url, response.body, response.status, response.headers);\r\n    }\r\n\r\n    put(url: string, response: any) {\r\n        this.assert('PUT', url, response.body, response.status, response.headers);\r\n    }\r\n\r\n    patch(url: string, response: any) {\r\n        this.assert('PATCH', url, response.body, response.status, response.headers);\r\n    }\r\n\r\n    options(url: string, response: any) {\r\n        this.assert('OPTIONS', url, response.body, response.status, response.headers);\r\n    }\r\n\r\n    head(url: string, response: any) {\r\n        this.assert('HEAD', url, response.body, response.status, response.headers);\r\n    }\r\n\r\n    delete(url: string, response: any) {\r\n        this.assert('DELETE', url, response.body, response.status, response.headers);\r\n    }\r\n\r\n    start() { \r\n        this.server.listen(SimpleWiremock.PORT, () => {\r\n            //console.log(`Listening port: ${SimpleWiremock.PORT}`);\r\n        });\r\n\r\n        this.server.on('connection', connection => {\r\n            this.connections.push(connection);\r\n            connection.on('close', () => this.connections = this.connections.filter((curr: import(\"net\").Socket) => curr !== connection));\r\n        });\r\n        return this;\r\n    }\r\n\r\n    stop() {\r\n       this.server.close();\r\n       this.connections.forEach((curr: { end: () => any; }) => curr.end());\r\n    }\r\n\r\n    enableRandomPort(){\r\n        SimpleWiremock.PORT = this.randomPort();\r\n        return this;\r\n    }\r\n\r\n    setPort(port: number){\r\n        SimpleWiremock.PORT = port;\r\n        return this;\r\n    }\r\n\r\n    private randomPort(){\r\n        return Math.trunc(this.defaultPort + (Math.random() * 500));\r\n    }\r\n\r\n    private assert(httpMethod: string, path: string, objectBody: any, statusCode: number, httpHeaders: any) {\r\n        const keygen = this.generateKey(httpMethod, path);\r\n        this.assertions[keygen] = {\r\n            key: keygen,\r\n            assertion: {\r\n                body: objectBody,\r\n                status: statusCode,\r\n                method: httpMethod,\r\n                headers: httpHeaders\r\n            }\r\n        };\r\n    }\r\n\r\n    private assertPosition(key: string) {\r\n        return this.assertions[key];\r\n    }\r\n\r\n    private generateKey(method: string, path: string) {\r\n        return `${method}|${path}`;\r\n    }\r\n\r\n    private allowCrossDomain(res: any) {\r\n        res.setHeader('Access-Control-Allow-Origin', '*');\r\n        res.setHeader('Access-Control-Allow-Methods', '*');\r\n        res.setHeader('Access-Control-Allow-Headers', '*');\r\n    }\r\n}\r\n"],"names":["http.createServer"],"mappings":"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"}